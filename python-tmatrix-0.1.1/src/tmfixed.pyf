!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _tmfixed ! in 
    interface  ! in :_tmfixed
        subroutine tmfixed(axi,rat,lam,mrr,mri,eps,epse,np,ddelt,ndgs,alpha,beta,thet0,thet,phi0,phi,qext,qsca,s11,s12,s21,s22,errcode) ! in :_tmfixed:ampld.lp.f
            real*8 :: axi
            real*8 :: rat
            real*8 :: lam
            real*8 :: mrr
            real*8 :: mri
            real*8 :: eps
            real*8 :: epse
            integer :: np
            real*8 :: ddelt
            integer :: ndgs
            real*8 :: alpha
            real*8 :: beta
            real*8 :: thet0
            real*8 :: thet
            real*8 :: phi0
            real*8 :: phi
            real*8, intent(out) :: qext
            real*8, intent(out) :: qsca
            complex*16, intent(out) :: s11
            complex*16, intent(out) :: s12
            complex*16, intent(out) :: s21
            complex*16, intent(out) :: s22
            integer, intent(out) :: errcode
            integer :: ichoice
            real*4 dimension(101,100,100) :: rt11
            real*4 dimension(101,100,100) :: rt12
            real*4 dimension(101,100,100) :: rt21
            real*4 dimension(101,100,100) :: rt22
            real*4 dimension(101,100,100) :: it11
            real*4 dimension(101,100,100) :: it12
            real*4 dimension(101,100,100) :: it21
            real*4 dimension(101,100,100) :: it22
            real*8 dimension(200,200) :: tr1
            real*8 dimension(200,200) :: ti1
            common /choice/ ichoice
            common /tmat/ rt11,rt12,rt21,rt22,it11,it12,it21,it22
            common /ct/ tr1,ti1
        end subroutine tmfixed
        subroutine ampl(nmax,dlam,tl,tl1,pl,pl1,alpha,beta,vv,vh,hv,hh,errcode) ! in :_tmfixed:ampld.lp.f
            integer :: nmax
            real*8 :: dlam
            real*8 :: tl
            real*8 :: tl1
            real*8 :: pl
            real*8 :: pl1
            real*8 :: alpha
            real*8 :: beta
            complex*16 :: vv
            complex*16 :: vh
            complex*16 :: hv
            complex*16 :: hh
            integer :: errcode
            real*4 dimension(101,100,100) :: tr11
            real*4 dimension(101,100,100) :: tr12
            real*4 dimension(101,100,100) :: tr21
            real*4 dimension(101,100,100) :: tr22
            real*4 dimension(101,100,100) :: ti11
            real*4 dimension(101,100,100) :: ti12
            real*4 dimension(101,100,100) :: ti21
            real*4 dimension(101,100,100) :: ti22
            common /tmat/ tr11,tr12,tr21,tr22,ti11,ti12,ti21,ti22
        end subroutine ampl
        subroutine vigampl(x,nmax,m,dv1,dv2) ! in :_tmfixed:ampld.lp.f
            real*8 :: x
            integer :: nmax
            integer :: m
            real*8 dimension(101) :: dv1
            real*8 dimension(101) :: dv2
        end subroutine vigampl
        subroutine constant(ngauss,nmax,mmax,p,x,w,an,ann,s,ss,np,eps) ! in :_tmfixed:ampld.lp.f
            integer :: ngauss
            integer :: nmax
            integer :: mmax
            real*8 :: p
            real*8 dimension(1000) :: x
            real*8 dimension(1000) :: w
            real*8 dimension(100) :: an
            real*8 dimension(100,100) :: ann
            real*8 dimension(1000) :: s
            real*8 dimension(1000) :: ss
            integer :: np
            real*8 :: eps
        end subroutine constant
        subroutine vary(lam,mrr,mri,a,eps,np,ngauss,x,p,ppi,pir,pii,r,dr,ddr,drr,dri,nmax,errcode) ! in :_tmfixed:ampld.lp.f
            real*8 :: lam
            real*8 :: mrr
            real*8 :: mri
            real*8 :: a
            real*8 :: eps
            integer :: np
            integer :: ngauss
            real*8 dimension(1000) :: x
            real*8 :: p
            real*8 :: ppi
            real*8 :: pir
            real*8 :: pii
            real*8 dimension(1000) :: r
            real*8 dimension(1000) :: dr
            real*8 dimension(1000) :: ddr
            real*8 dimension(1000) :: drr
            real*8 dimension(1000) :: dri
            integer :: nmax
            integer :: errcode
            real*8 dimension(1000,100) :: j
            real*8 dimension(1000,100) :: y
            real*8 dimension(1000,100) :: jr
            real*8 dimension(1000,100) :: ji
            real*8 dimension(1000,100) :: dj
            real*8 dimension(1000,100) :: dy
            real*8 dimension(1000,100) :: djr
            real*8 dimension(1000,100) :: dji
            common /cbess/ j,y,jr,ji,dj,dy,djr,dji
        end subroutine vary
        subroutine rsp1(x,ng,ngauss,rev,eps,np,r,dr) ! in :_tmfixed:ampld.lp.f
            real*8 dimension(ng) :: x
            integer optional,check(len(x)>=ng),depend(x) :: ng=len(x)
            integer :: ngauss
            real*8 :: rev
            real*8 :: eps
            integer :: np
            real*8 dimension(ng),depend(ng) :: r
            real*8 dimension(ng),depend(ng) :: dr
        end subroutine rsp1
        subroutine rsp2(x,ng,rev,eps,n,r,dr) ! in :_tmfixed:ampld.lp.f
            real*8 dimension(ng) :: x
            integer optional,check(len(x)>=ng),depend(x) :: ng=len(x)
            real*8 :: rev
            real*8 :: eps
            integer :: n
            real*8 dimension(ng),depend(ng) :: r
            real*8 dimension(ng),depend(ng) :: dr
        end subroutine rsp2
        subroutine rsp3(x,ng,ngauss,rev,eps,r,dr) ! in :_tmfixed:ampld.lp.f
            real*8 dimension(ng) :: x
            integer optional,check(len(x)>=ng),depend(x) :: ng=len(x)
            integer :: ngauss
            real*8 :: rev
            real*8 :: eps
            real*8 dimension(ng),depend(ng) :: r
            real*8 dimension(ng),depend(ng) :: dr
        end subroutine rsp3
        subroutine rsp4(x,ng,rev,r,dr) ! in :_tmfixed:ampld.lp.f
            real*8 dimension(ng) :: x
            integer optional,check(len(x)>=ng),depend(x) :: ng=len(x)
            real*8 :: rev
            real*8 dimension(ng),depend(ng) :: r
            real*8 dimension(ng),depend(ng) :: dr
            real*8 dimension(11) :: c
            real*8 :: r0v
            common /cdrop/ c,r0v
        end subroutine rsp4
        subroutine bess(x,xr,xi,ng,nmax,nnmax1,nnmax2) ! in :_tmfixed:ampld.lp.f
            real*8 dimension(ng) :: x
            real*8 dimension(ng),depend(ng) :: xr
            real*8 dimension(ng),depend(ng) :: xi
            integer optional,check(len(x)>=ng),depend(x) :: ng=len(x)
            integer :: nmax
            integer :: nnmax1
            integer :: nnmax2
            real*8 dimension(1000,100) :: j
            real*8 dimension(1000,100) :: y
            real*8 dimension(1000,100) :: jr
            real*8 dimension(1000,100) :: ji
            real*8 dimension(1000,100) :: dj
            real*8 dimension(1000,100) :: dy
            real*8 dimension(1000,100) :: djr
            real*8 dimension(1000,100) :: dji
            common /cbess/ j,y,jr,ji,dj,dy,djr,dji
        end subroutine bess
        subroutine rjb(x,y,u,nmax,nnmax) ! in :_tmfixed:ampld.lp.f
            real*8 :: x
            real*8 dimension(nmax) :: y
            real*8 dimension(nmax),depend(nmax) :: u
            integer optional,check(len(y)>=nmax),depend(y) :: nmax=len(y)
            integer :: nnmax
        end subroutine rjb
        subroutine ryb(x,y,v,nmax) ! in :_tmfixed:ampld.lp.f
            real*8 :: x
            real*8 dimension(nmax) :: y
            real*8 dimension(nmax),depend(nmax) :: v
            integer optional,check(len(y)>=nmax),depend(y) :: nmax=len(y)
        end subroutine ryb
        subroutine cjb(xr,xi,yr,yi,ur,ui,nmax,nnmax) ! in :_tmfixed:ampld.lp.f
            real*8 :: xr
            real*8 :: xi
            real*8 dimension(nmax) :: yr
            real*8 dimension(nmax),depend(nmax) :: yi
            real*8 dimension(nmax),depend(nmax) :: ur
            real*8 dimension(nmax),depend(nmax) :: ui
            integer optional,check(len(yr)>=nmax),depend(yr) :: nmax=len(yr)
            integer :: nnmax
        end subroutine cjb
        subroutine tmatr0(ngauss,x,w,an,ann,s,ss,ppi,pir,pii,r,dr,ddr,drr,dri,nmax,ncheck) ! in :_tmfixed:ampld.lp.f
            integer :: ngauss
            real*8 dimension(1000) :: x
            real*8 dimension(1000) :: w
            real*8 dimension(100) :: an
            real*8 dimension(100,100) :: ann
            real*8 dimension(1000) :: s
            real*8 dimension(1000) :: ss
            real*8 :: ppi
            real*8 :: pir
            real*8 :: pii
            real*8 dimension(1000) :: r
            real*8 dimension(1000) :: dr
            real*8 dimension(1000) :: ddr
            real*8 dimension(1000) :: drr
            real*8 dimension(1000) :: dri
            integer :: nmax
            integer :: ncheck
            real*8 dimension(200,200) :: qr
            real*8 dimension(200,200) :: qi
            real*8 dimension(200,200) :: rgqr
            real*8 dimension(200,200) :: rgqi
            real*8 dimension(100,100) :: r11
            real*8 dimension(100,100) :: r12
            real*8 dimension(100,100) :: r21
            real*8 dimension(100,100) :: r22
            real*8 dimension(100,100) :: i11
            real*8 dimension(100,100) :: i12
            real*8 dimension(100,100) :: i21
            real*8 dimension(100,100) :: i22
            real*8 dimension(100,100) :: rg11
            real*8 dimension(100,100) :: rg12
            real*8 dimension(100,100) :: rg21
            real*8 dimension(100,100) :: rg22
            real*8 dimension(100,100) :: ig11
            real*8 dimension(100,100) :: ig12
            real*8 dimension(100,100) :: ig21
            real*8 dimension(100,100) :: ig22
            real*8 dimension(1000,100) :: j
            real*8 dimension(1000,100) :: y
            real*8 dimension(1000,100) :: jr
            real*8 dimension(1000,100) :: ji
            real*8 dimension(1000,100) :: dj
            real*8 dimension(1000,100) :: dy
            real*8 dimension(1000,100) :: djr
            real*8 dimension(1000,100) :: dji
            real*8 dimension(200,200) :: tr1
            real*8 dimension(200,200) :: ti1
            common /ctt/ qr,qi,rgqr,rgqi
            common /tmat99/ r11,r12,r21,r22,i11,i12,i21,i22,rg11,rg12,rg21,rg22,ig11,ig12,ig21,ig22
            common /cbess/ j,y,jr,ji,dj,dy,djr,dji
            common /ct/ tr1,ti1
        end subroutine tmatr0
        subroutine tmatr(m,ngauss,x,w,an,ann,s,ss,ppi,pir,pii,r,dr,ddr,drr,dri,nmax,ncheck) ! in :_tmfixed:ampld.lp.f
            integer :: m
            integer :: ngauss
            real*8 dimension(1000) :: x
            real*8 dimension(1000) :: w
            real*8 dimension(100) :: an
            real*8 dimension(100,100) :: ann
            real*8 dimension(1000) :: s
            real*8 dimension(1000) :: ss
            real*8 :: ppi
            real*8 :: pir
            real*8 :: pii
            real*8 dimension(1000) :: r
            real*8 dimension(1000) :: dr
            real*8 dimension(1000) :: ddr
            real*8 dimension(1000) :: drr
            real*8 dimension(1000) :: dri
            integer :: nmax
            integer :: ncheck
            real*8 dimension(200,200) :: qr
            real*8 dimension(200,200) :: qi
            real*8 dimension(200,200) :: rgqr
            real*8 dimension(200,200) :: rgqi
            real*8 dimension(100,100) :: r11
            real*8 dimension(100,100) :: r12
            real*8 dimension(100,100) :: r21
            real*8 dimension(100,100) :: r22
            real*8 dimension(100,100) :: i11
            real*8 dimension(100,100) :: i12
            real*8 dimension(100,100) :: i21
            real*8 dimension(100,100) :: i22
            real*8 dimension(100,100) :: rg11
            real*8 dimension(100,100) :: rg12
            real*8 dimension(100,100) :: rg21
            real*8 dimension(100,100) :: rg22
            real*8 dimension(100,100) :: ig11
            real*8 dimension(100,100) :: ig12
            real*8 dimension(100,100) :: ig21
            real*8 dimension(100,100) :: ig22
            real*8 dimension(1000,100) :: j
            real*8 dimension(1000,100) :: y
            real*8 dimension(1000,100) :: jr
            real*8 dimension(1000,100) :: ji
            real*8 dimension(1000,100) :: dj
            real*8 dimension(1000,100) :: dy
            real*8 dimension(1000,100) :: djr
            real*8 dimension(1000,100) :: dji
            real*8 dimension(200,200) :: tr1
            real*8 dimension(200,200) :: ti1
            common /ctt/ qr,qi,rgqr,rgqi
            common /tmat99/ r11,r12,r21,r22,i11,i12,i21,i22,rg11,rg12,rg21,rg22,ig11,ig12,ig21,ig22
            common /cbess/ j,y,jr,ji,dj,dy,djr,dji
            common /ct/ tr1,ti1
        end subroutine tmatr
        subroutine vig(x,nmax,m,dv1,dv2) ! in :_tmfixed:ampld.lp.f
            real*8 :: x
            integer :: nmax
            integer :: m
            real*8 dimension(100) :: dv1
            real*8 dimension(100) :: dv2
        end subroutine vig
        subroutine tt(nmax,ncheck) ! in :_tmfixed:ampld.lp.f
            integer :: nmax
            integer :: ncheck
            real*8 dimension(200,200) :: qr
            real*8 dimension(200,200) :: qi
            real*8 dimension(200,200) :: rgqr
            real*8 dimension(200,200) :: rgqi
            real*8 dimension(200,200) :: tr1
            real*8 dimension(200,200) :: ti1
            common /ctt/ qr,qi,rgqr,rgqi
            common /ct/ tr1,ti1
        end subroutine tt
        subroutine sarea(d,rat) ! in :_tmfixed:ampld.lp.f
            real*8 :: d
            real*8 :: rat
        end subroutine sarea
        subroutine surfch(n,e,rat) ! in :_tmfixed:ampld.lp.f
            integer :: n
            real*8 :: e
            real*8 :: rat
        end subroutine surfch
        subroutine sareac(eps,rat) ! in :_tmfixed:ampld.lp.f
            real*8 :: eps
            real*8 :: rat
        end subroutine sareac
        subroutine drop(rat) ! in :_tmfixed:ampld.lp.f
            real*8 :: rat
            real*8 dimension(11) :: c
            real*8 :: r0v
            common /cdrop/ c,r0v
        end subroutine drop
        subroutine gauss(n,ind1,ind2,z,w) ! in :_tmfixed:ampld.lp.f
            integer optional,check(len(z)>=n),depend(z) :: n=len(z)
            integer :: ind1
            integer :: ind2
            real*8 dimension(n) :: z
            real*8 dimension(n),depend(n) :: w
        end subroutine gauss
    end interface 
end python module _tmfixed

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
